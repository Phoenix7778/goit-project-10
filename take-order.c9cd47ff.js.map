{"mappings":"AAWA,IAAMA,eAAiBC,SAASC,uBAAuB,mBAAmB,GACpEC,eAAiBF,SAASC,uBAAuB,mBAAmB,GACpEE,kBAAoBD,eAAeE,SAAS,GAC5CC,mBAAqBH,eAAeE,SAAS,GAC7CE,eAAiBC,MAAMC,KAAKH,mBAAmBD,UAC/CK,aAAeH,eAAeI,OAC9BC,aAAeR,kBAAkBS,aAAa,cAEhDC,cAAgB,GAChBC,oBAAqB,EAazB,SAASC,oBACPb,eAAec,UAAUC,IAAI,YAG7Bf,eAAegB,aAAa,eAAe,GAEvCL,gBAIFM,0BAH2Bb,eAAec,WACxC,SAAAC,G,OAAMA,EAAGT,aAAa,gBAAkBC,a,KAM5Cb,SAASsB,iBAAiB,QAASC,mBACnCvB,SAASsB,iBAAiB,UAAWE,0B,CAGvC,SAASC,oBACPvB,eAAec,UAAUU,OAAO,YAEhCxB,eAAegB,aAAa,eAAe,GAE3CC,2BAA0B,GAG1BnB,SAAS2B,oBAAoB,QAASJ,mBACtCvB,SAAS2B,oBAAoB,UAAWH,0B,CAG1C,SAASL,0BAA0BS,GACjC,IAAMC,EAAaxB,mBAAmBD,SAASU,oBACzCgB,EAASzB,mBAAmBD,SAASwB,GAEvCC,GACFA,EAAWb,UAAUU,OAAO,WAE1BI,GACFA,EAAOd,UAAUC,IAAI,WAGvBH,mBAAqBc,C,CAGvB,SAASG,0BAA0BC,EAAOC,GACxC,IAAMC,EAAYrB,cAEZsB,EAAe9B,mBAAmB+B,cACtC,gBAA0BC,OAAVH,EAAU,MAEtBI,EAAWjC,mBAAmB+B,cAAc,gBAAsBC,OAANL,EAAM,MAEpEG,GACFA,EAAanB,UAAUU,OAAO,YAG5BY,GACFA,EAAStB,UAAUC,IAAI,YAGzBd,kBAAkBoC,YAAcN,EAChCpB,cAAgBmB,C,CAGlB,SAAST,kBAAkBiB,IACEtC,eAAeuC,SAASC,MAAMC,SAEvDlB,mB,CAIJ,SAASD,0BAA0BgB,GAEjC,GAAsB,KAAlBE,MAAME,SAAkB9B,mBAAqBL,aAAe,EAAG,CAEjE+B,EAAEK,iBACF1B,0BAA0BL,mBAAqB,E,CAUjD,GANsB,KAAlB4B,MAAME,SAAkB9B,mBAAqB,IAC/C0B,EAAEK,iBACF1B,0BAA0BL,mBAAqB,IAI3B,KAAlB4B,MAAME,SAAoC,KAAlBF,MAAME,QAAgB,CAChDJ,EAAEK,iBAEF,IAAMf,EAASzB,mBAAmBD,SAASU,oBACrCkB,EAAQF,GAAUA,EAAOlB,aAAa,cAExCoB,IACFjC,eAAeiC,MAAQA,EACvBD,0BAA0BC,EAAOF,EAAOS,cAE1Cd,mB,CAIoB,KAAlBiB,MAAME,SACRnB,mB,CA/GJtB,kBAAkBmB,iBAAiB,SAAS,SAAAkB,IACxBtC,eAAec,UAAUyB,SAAS,YAGlD1B,mBAEAU,mB,IA8GJ1B,eAAeuB,iBAAiB,UAAU,SAAAkB,GACxC,IAAMR,EAAQQ,EAAEG,OAAOX,MAKvBD,0BAA0BC,EAJO3B,mBAAmByC,iBAClD,gBAAsBT,OAANL,EAAM,OACtB,GAEwDO,Y,IAI5DjC,eAAeyC,SAAQ,SAAUT,EAAUU,GACzCV,EAAShB,iBAAiB,SAAS,SAAAkB,GACjC,IAAMR,EAAQQ,EAAEG,OAAO/B,aAAa,cAGpCb,eAAeiC,MAAQA,EACvBD,0BAA0BC,EAAOQ,EAAEG,OAAOJ,aAC1Cd,mB,IAGFa,EAAShB,iBAAiB,cAAc,SAAAkB,GACtCrB,0BAA0B6B,E","sources":["src/js/select.js"],"sourcesContent":["/* Features to make the selectCustom work for mouse users.\n\n- Toggle custom select visibility when clicking the \"box\"\n- Update custom select value when clicking in a option\n- Navigate through options when using keyboard up/down\n- Pressing Enter or Space selects the current hovered option\n- Close the select when clicking outside of it\n- Sync both selects values when selecting a option. (native or custom)\n\n*/\n\nconst elSelectNative = document.getElementsByClassName('js-selectNative')[0];\nconst elSelectCustom = document.getElementsByClassName('js-selectCustom')[0];\nconst elSelectCustomBox = elSelectCustom.children[0];\nconst elSelectCustomOpts = elSelectCustom.children[1];\nconst customOptsList = Array.from(elSelectCustomOpts.children);\nconst optionsCount = customOptsList.length;\nconst defaultLabel = elSelectCustomBox.getAttribute('data-value');\n\nlet optionChecked = '';\nlet optionHoveredIndex = -1;\n\n// Toggle custom select visibility when clicking the box\nelSelectCustomBox.addEventListener('click', e => {\n  const isClosed = !elSelectCustom.classList.contains('isActive');\n\n  if (isClosed) {\n    openSelectCustom();\n  } else {\n    closeSelectCustom();\n  }\n});\n\nfunction openSelectCustom() {\n  elSelectCustom.classList.add('isActive');\n  // Remove aria-hidden in case this was opened by a user\n  // who uses AT (e.g. Screen Reader) and a mouse at the same time.\n  elSelectCustom.setAttribute('aria-hidden', false);\n\n  if (optionChecked) {\n    const optionCheckedIndex = customOptsList.findIndex(\n      el => el.getAttribute('data-value') === optionChecked\n    );\n    updateCustomSelectHovered(optionCheckedIndex);\n  }\n\n  // Add related event listeners\n  document.addEventListener('click', watchClickOutside);\n  document.addEventListener('keydown', supportKeyboardNavigation);\n}\n\nfunction closeSelectCustom() {\n  elSelectCustom.classList.remove('isActive');\n\n  elSelectCustom.setAttribute('aria-hidden', true);\n\n  updateCustomSelectHovered(-1);\n\n  // Remove related event listeners\n  document.removeEventListener('click', watchClickOutside);\n  document.removeEventListener('keydown', supportKeyboardNavigation);\n}\n\nfunction updateCustomSelectHovered(newIndex) {\n  const prevOption = elSelectCustomOpts.children[optionHoveredIndex];\n  const option = elSelectCustomOpts.children[newIndex];\n\n  if (prevOption) {\n    prevOption.classList.remove('isHover');\n  }\n  if (option) {\n    option.classList.add('isHover');\n  }\n\n  optionHoveredIndex = newIndex;\n}\n\nfunction updateCustomSelectChecked(value, text) {\n  const prevValue = optionChecked;\n\n  const elPrevOption = elSelectCustomOpts.querySelector(\n    `[data-value=\"${prevValue}\"`\n  );\n  const elOption = elSelectCustomOpts.querySelector(`[data-value=\"${value}\"`);\n\n  if (elPrevOption) {\n    elPrevOption.classList.remove('isActive');\n  }\n\n  if (elOption) {\n    elOption.classList.add('isActive');\n  }\n\n  elSelectCustomBox.textContent = text;\n  optionChecked = value;\n}\n\nfunction watchClickOutside(e) {\n  const didClickedOutside = !elSelectCustom.contains(event.target);\n  if (didClickedOutside) {\n    closeSelectCustom();\n  }\n}\n\nfunction supportKeyboardNavigation(e) {\n  // press down -> go next\n  if (event.keyCode === 40 && optionHoveredIndex < optionsCount - 1) {\n    let index = optionHoveredIndex;\n    e.preventDefault(); // prevent page scrolling\n    updateCustomSelectHovered(optionHoveredIndex + 1);\n  }\n\n  // press up -> go previous\n  if (event.keyCode === 38 && optionHoveredIndex > 0) {\n    e.preventDefault(); // prevent page scrolling\n    updateCustomSelectHovered(optionHoveredIndex - 1);\n  }\n\n  // press Enter or space -> select the option\n  if (event.keyCode === 13 || event.keyCode === 32) {\n    e.preventDefault();\n\n    const option = elSelectCustomOpts.children[optionHoveredIndex];\n    const value = option && option.getAttribute('data-value');\n\n    if (value) {\n      elSelectNative.value = value;\n      updateCustomSelectChecked(value, option.textContent);\n    }\n    closeSelectCustom();\n  }\n\n  // press ESC -> close selectCustom\n  if (event.keyCode === 27) {\n    closeSelectCustom();\n  }\n}\n\n// Update selectCustom value when selectNative is changed.\nelSelectNative.addEventListener('change', e => {\n  const value = e.target.value;\n  const elRespectiveCustomOption = elSelectCustomOpts.querySelectorAll(\n    `[data-value=\"${value}\"]`\n  )[0];\n\n  updateCustomSelectChecked(value, elRespectiveCustomOption.textContent);\n});\n\n// Update selectCustom value when an option is clicked or hovered\ncustomOptsList.forEach(function (elOption, index) {\n  elOption.addEventListener('click', e => {\n    const value = e.target.getAttribute('data-value');\n\n    // Sync native select to have the same value\n    elSelectNative.value = value;\n    updateCustomSelectChecked(value, e.target.textContent);\n    closeSelectCustom();\n  });\n\n  elOption.addEventListener('mouseenter', e => {\n    updateCustomSelectHovered(index);\n  });\n\n  // TODO: Toggle these event listeners based on selectCustom visibility\n});\n"],"names":["elSelectNative","document","getElementsByClassName","elSelectCustom","elSelectCustomBox","children","elSelectCustomOpts","customOptsList","Array","from","optionsCount","length","defaultLabel","getAttribute","optionChecked","optionHoveredIndex","openSelectCustom","classList","add","setAttribute","updateCustomSelectHovered","findIndex","el","addEventListener","watchClickOutside","supportKeyboardNavigation","closeSelectCustom","remove","removeEventListener","newIndex","prevOption","option","updateCustomSelectChecked","value","text","prevValue","elPrevOption","querySelector","concat","elOption","textContent","e","contains","event","target","keyCode","preventDefault","querySelectorAll","forEach","index"],"version":3,"file":"take-order.c9cd47ff.js.map"}